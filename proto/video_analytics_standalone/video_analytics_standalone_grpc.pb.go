// MIT License

// Copyright (c) 2024 EASE Lab

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/video_analytics_standalone/video_analytics_standalone.proto

package video_analytics_standalone

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoAnalytics_ObjectDetection_FullMethodName = "/video_analytics_standalone.VideoAnalytics/ObjectDetection"
)

// VideoAnalyticsClient is the client API for VideoAnalytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoAnalyticsClient interface {
	ObjectDetection(ctx context.Context, in *SendVideo, opts ...grpc.CallOption) (*GetResult, error)
}

type videoAnalyticsClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoAnalyticsClient(cc grpc.ClientConnInterface) VideoAnalyticsClient {
	return &videoAnalyticsClient{cc}
}

func (c *videoAnalyticsClient) ObjectDetection(ctx context.Context, in *SendVideo, opts ...grpc.CallOption) (*GetResult, error) {
	out := new(GetResult)
	err := c.cc.Invoke(ctx, VideoAnalytics_ObjectDetection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoAnalyticsServer is the server API for VideoAnalytics service.
// All implementations must embed UnimplementedVideoAnalyticsServer
// for forward compatibility
type VideoAnalyticsServer interface {
	ObjectDetection(context.Context, *SendVideo) (*GetResult, error)
	mustEmbedUnimplementedVideoAnalyticsServer()
}

// UnimplementedVideoAnalyticsServer must be embedded to have forward compatible implementations.
type UnimplementedVideoAnalyticsServer struct {
}

func (UnimplementedVideoAnalyticsServer) ObjectDetection(context.Context, *SendVideo) (*GetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObjectDetection not implemented")
}
func (UnimplementedVideoAnalyticsServer) mustEmbedUnimplementedVideoAnalyticsServer() {}

// UnsafeVideoAnalyticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoAnalyticsServer will
// result in compilation errors.
type UnsafeVideoAnalyticsServer interface {
	mustEmbedUnimplementedVideoAnalyticsServer()
}

func RegisterVideoAnalyticsServer(s grpc.ServiceRegistrar, srv VideoAnalyticsServer) {
	s.RegisterService(&VideoAnalytics_ServiceDesc, srv)
}

func _VideoAnalytics_ObjectDetection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVideo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoAnalyticsServer).ObjectDetection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoAnalytics_ObjectDetection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoAnalyticsServer).ObjectDetection(ctx, req.(*SendVideo))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoAnalytics_ServiceDesc is the grpc.ServiceDesc for VideoAnalytics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoAnalytics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video_analytics_standalone.VideoAnalytics",
	HandlerType: (*VideoAnalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ObjectDetection",
			Handler:    _VideoAnalytics_ObjectDetection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/video_analytics_standalone/video_analytics_standalone.proto",
}
