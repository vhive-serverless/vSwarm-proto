// MIT License

// Copyright (c) 2021 EASE Lab

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/gptj/gptj.proto

package gptj

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GptJBenchmark_GetBenchmark_FullMethodName = "/gptj.GptJBenchmark/GetBenchmark"
)

// GptJBenchmarkClient is the client API for GptJBenchmark service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GptJBenchmarkClient interface {
	GetBenchmark(ctx context.Context, in *GptJBenchmarkRequest, opts ...grpc.CallOption) (*GptJBenchmarkReply, error)
}

type gptJBenchmarkClient struct {
	cc grpc.ClientConnInterface
}

func NewGptJBenchmarkClient(cc grpc.ClientConnInterface) GptJBenchmarkClient {
	return &gptJBenchmarkClient{cc}
}

func (c *gptJBenchmarkClient) GetBenchmark(ctx context.Context, in *GptJBenchmarkRequest, opts ...grpc.CallOption) (*GptJBenchmarkReply, error) {
	out := new(GptJBenchmarkReply)
	err := c.cc.Invoke(ctx, GptJBenchmark_GetBenchmark_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GptJBenchmarkServer is the server API for GptJBenchmark service.
// All implementations must embed UnimplementedGptJBenchmarkServer
// for forward compatibility
type GptJBenchmarkServer interface {
	GetBenchmark(context.Context, *GptJBenchmarkRequest) (*GptJBenchmarkReply, error)
	mustEmbedUnimplementedGptJBenchmarkServer()
}

// UnimplementedGptJBenchmarkServer must be embedded to have forward compatible implementations.
type UnimplementedGptJBenchmarkServer struct {
}

func (UnimplementedGptJBenchmarkServer) GetBenchmark(context.Context, *GptJBenchmarkRequest) (*GptJBenchmarkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBenchmark not implemented")
}
func (UnimplementedGptJBenchmarkServer) mustEmbedUnimplementedGptJBenchmarkServer() {}

// UnsafeGptJBenchmarkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GptJBenchmarkServer will
// result in compilation errors.
type UnsafeGptJBenchmarkServer interface {
	mustEmbedUnimplementedGptJBenchmarkServer()
}

func RegisterGptJBenchmarkServer(s grpc.ServiceRegistrar, srv GptJBenchmarkServer) {
	s.RegisterService(&GptJBenchmark_ServiceDesc, srv)
}

func _GptJBenchmark_GetBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GptJBenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GptJBenchmarkServer).GetBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GptJBenchmark_GetBenchmark_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GptJBenchmarkServer).GetBenchmark(ctx, req.(*GptJBenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GptJBenchmark_ServiceDesc is the grpc.ServiceDesc for GptJBenchmark service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GptJBenchmark_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gptj.GptJBenchmark",
	HandlerType: (*GptJBenchmarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBenchmark",
			Handler:    _GptJBenchmark_GetBenchmark_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gptj/gptj.proto",
}
