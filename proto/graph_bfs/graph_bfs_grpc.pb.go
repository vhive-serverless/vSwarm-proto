// MIT License

// Copyright (c) 2021 EASE Lab

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/graph_bfs/graph_bfs.proto

package graph_bfs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GraphBFSBenchmark_GetBfs_FullMethodName = "/graph_bfs.GraphBFSBenchmark/GetBfs"
)

// GraphBFSBenchmarkClient is the client API for GraphBFSBenchmark service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphBFSBenchmarkClient interface {
	GetBfs(ctx context.Context, in *GraphBFSBenchmarkRequest, opts ...grpc.CallOption) (*GraphBFSBenchmarkReply, error)
}

type graphBFSBenchmarkClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphBFSBenchmarkClient(cc grpc.ClientConnInterface) GraphBFSBenchmarkClient {
	return &graphBFSBenchmarkClient{cc}
}

func (c *graphBFSBenchmarkClient) GetBfs(ctx context.Context, in *GraphBFSBenchmarkRequest, opts ...grpc.CallOption) (*GraphBFSBenchmarkReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GraphBFSBenchmarkReply)
	err := c.cc.Invoke(ctx, GraphBFSBenchmark_GetBfs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphBFSBenchmarkServer is the server API for GraphBFSBenchmark service.
// All implementations must embed UnimplementedGraphBFSBenchmarkServer
// for forward compatibility.
type GraphBFSBenchmarkServer interface {
	GetBfs(context.Context, *GraphBFSBenchmarkRequest) (*GraphBFSBenchmarkReply, error)
	mustEmbedUnimplementedGraphBFSBenchmarkServer()
}

// UnimplementedGraphBFSBenchmarkServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGraphBFSBenchmarkServer struct{}

func (UnimplementedGraphBFSBenchmarkServer) GetBfs(context.Context, *GraphBFSBenchmarkRequest) (*GraphBFSBenchmarkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBfs not implemented")
}
func (UnimplementedGraphBFSBenchmarkServer) mustEmbedUnimplementedGraphBFSBenchmarkServer() {}
func (UnimplementedGraphBFSBenchmarkServer) testEmbeddedByValue()                           {}

// UnsafeGraphBFSBenchmarkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphBFSBenchmarkServer will
// result in compilation errors.
type UnsafeGraphBFSBenchmarkServer interface {
	mustEmbedUnimplementedGraphBFSBenchmarkServer()
}

func RegisterGraphBFSBenchmarkServer(s grpc.ServiceRegistrar, srv GraphBFSBenchmarkServer) {
	// If the following call pancis, it indicates UnimplementedGraphBFSBenchmarkServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GraphBFSBenchmark_ServiceDesc, srv)
}

func _GraphBFSBenchmark_GetBfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphBFSBenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphBFSBenchmarkServer).GetBfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GraphBFSBenchmark_GetBfs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphBFSBenchmarkServer).GetBfs(ctx, req.(*GraphBFSBenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GraphBFSBenchmark_ServiceDesc is the grpc.ServiceDesc for GraphBFSBenchmark service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphBFSBenchmark_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graph_bfs.GraphBFSBenchmark",
	HandlerType: (*GraphBFSBenchmarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBfs",
			Handler:    _GraphBFSBenchmark_GetBfs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/graph_bfs/graph_bfs.proto",
}
