// MIT License

// Copyright (c) 2021 EASE Lab

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: proto/image_rotate/image_rotate.proto

package image_rotate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImageRotate_RotateImage_FullMethodName = "/image_rotate.ImageRotate/RotateImage"
)

// ImageRotateClient is the client API for ImageRotate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageRotateClient interface {
	RotateImage(ctx context.Context, in *SendImage, opts ...grpc.CallOption) (*GetRotatedImage, error)
}

type imageRotateClient struct {
	cc grpc.ClientConnInterface
}

func NewImageRotateClient(cc grpc.ClientConnInterface) ImageRotateClient {
	return &imageRotateClient{cc}
}

func (c *imageRotateClient) RotateImage(ctx context.Context, in *SendImage, opts ...grpc.CallOption) (*GetRotatedImage, error) {
	out := new(GetRotatedImage)
	err := c.cc.Invoke(ctx, ImageRotate_RotateImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageRotateServer is the server API for ImageRotate service.
// All implementations must embed UnimplementedImageRotateServer
// for forward compatibility
type ImageRotateServer interface {
	RotateImage(context.Context, *SendImage) (*GetRotatedImage, error)
	mustEmbedUnimplementedImageRotateServer()
}

// UnimplementedImageRotateServer must be embedded to have forward compatible implementations.
type UnimplementedImageRotateServer struct {
}

func (UnimplementedImageRotateServer) RotateImage(context.Context, *SendImage) (*GetRotatedImage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateImage not implemented")
}
func (UnimplementedImageRotateServer) mustEmbedUnimplementedImageRotateServer() {}

// UnsafeImageRotateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageRotateServer will
// result in compilation errors.
type UnsafeImageRotateServer interface {
	mustEmbedUnimplementedImageRotateServer()
}

func RegisterImageRotateServer(s grpc.ServiceRegistrar, srv ImageRotateServer) {
	s.RegisterService(&ImageRotate_ServiceDesc, srv)
}

func _ImageRotate_RotateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRotateServer).RotateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageRotate_RotateImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRotateServer).RotateImage(ctx, req.(*SendImage))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageRotate_ServiceDesc is the grpc.ServiceDesc for ImageRotate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageRotate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "image_rotate.ImageRotate",
	HandlerType: (*ImageRotateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RotateImage",
			Handler:    _ImageRotate_RotateImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/image_rotate/image_rotate.proto",
}
