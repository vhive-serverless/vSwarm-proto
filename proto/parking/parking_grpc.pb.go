// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: proto/parking/parking.proto

package parking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Parking_DoParking_FullMethodName = "/parking.Parking/DoParking"
)

// ParkingClient is the client API for Parking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParkingClient interface {
	DoParking(ctx context.Context, in *ParkingRequest, opts ...grpc.CallOption) (*ParkingReply, error)
}

type parkingClient struct {
	cc grpc.ClientConnInterface
}

func NewParkingClient(cc grpc.ClientConnInterface) ParkingClient {
	return &parkingClient{cc}
}

func (c *parkingClient) DoParking(ctx context.Context, in *ParkingRequest, opts ...grpc.CallOption) (*ParkingReply, error) {
	out := new(ParkingReply)
	err := c.cc.Invoke(ctx, Parking_DoParking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParkingServer is the server API for Parking service.
// All implementations must embed UnimplementedParkingServer
// for forward compatibility
type ParkingServer interface {
	DoParking(context.Context, *ParkingRequest) (*ParkingReply, error)
	mustEmbedUnimplementedParkingServer()
}

// UnimplementedParkingServer must be embedded to have forward compatible implementations.
type UnimplementedParkingServer struct {
}

func (UnimplementedParkingServer) DoParking(context.Context, *ParkingRequest) (*ParkingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoParking not implemented")
}
func (UnimplementedParkingServer) mustEmbedUnimplementedParkingServer() {}

// UnsafeParkingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParkingServer will
// result in compilation errors.
type UnsafeParkingServer interface {
	mustEmbedUnimplementedParkingServer()
}

func RegisterParkingServer(s grpc.ServiceRegistrar, srv ParkingServer) {
	s.RegisterService(&Parking_ServiceDesc, srv)
}

func _Parking_DoParking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServer).DoParking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Parking_DoParking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServer).DoParking(ctx, req.(*ParkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Parking_ServiceDesc is the grpc.ServiceDesc for Parking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Parking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parking.Parking",
	HandlerType: (*ParkingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoParking",
			Handler:    _Parking_DoParking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/parking/parking.proto",
}
